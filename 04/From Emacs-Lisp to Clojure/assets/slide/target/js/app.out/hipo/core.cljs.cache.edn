;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name hipo.core, :imports nil, :requires {hipo.interceptor hipo.interceptor, hi hipo.interpreter, hipo.interpreter hipo.interpreter}, :uses nil, :defs {hiccup-property {:name hipo.core/hiccup-property, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :line 6, :column 1, :end-line 6, :end-column 31, :private true, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :line 6, :column 16, :end-line 6, :end-column 31, :private true}}, get-hiccup {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :line 8, :column 7, :end-line 8, :end-column 17, :arglists (quote ([el]))}, :name hipo.core/get-hiccup, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :end-column 17, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el]))}, set-hiccup! {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :line 10, :column 7, :end-line 10, :end-column 18, :arglists (quote ([el h]))}, :name hipo.core/set-hiccup!, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :end-column 18, :method-params ([el h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el h]))}, reconciliate! {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :line 14, :column 7, :end-line 14, :end-column 20, :arglists (quote ([el nh] [el nh m] [el oh nh m])), :doc "Reconciliate an existing DOM element to match an hiccup style vector.\n   Reconciliation works by diffing the hiccup used to create the DOM element with a new hiccup. Element created with `hipo.core/create` can be reconcilied without providing the previous hiccup.\n   Last argument is an optional map of options.\n\n   Options:\n\n   * force-compilation? fail create if DOM construction can't be fully compiled\n   * force-interpretation? bypass the DOM construction compilation\n   * create-element-fn\n   * namespaces\n   * attribute-handlers\n   * interceptors\n  ", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([el nh] [el nh m] [el oh nh m]), :arglists ([el nh] [el nh m] [el oh nh m]), :arglists-meta (nil nil nil)}}, :name hipo.core/reconciliate!, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([el nh] [el nh m] [el oh nh m]), :arglists ([el nh] [el nh m] [el oh nh m]), :arglists-meta (nil nil nil)}, :method-params ([el nh] [el nh m] [el oh nh m]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 4, :fn-var true, :arglists ([el nh] [el nh m] [el oh nh m]), :doc "Reconciliate an existing DOM element to match an hiccup style vector.\n   Reconciliation works by diffing the hiccup used to create the DOM element with a new hiccup. Element created with `hipo.core/create` can be reconcilied without providing the previous hiccup.\n   Last argument is an optional map of options.\n\n   Options:\n\n   * force-compilation? fail create if DOM construction can't be fully compiled\n   * force-interpretation? bypass the DOM construction compilation\n   * create-element-fn\n   * namespaces\n   * attribute-handlers\n   * interceptors\n  "}}, :require-macros {hipo.core hipo.core, hipo.interceptor hipo.interceptor}, :cljs.analyzer/constants {:seen #{oh nil? not}, :order [not nil? oh]}, :doc nil}