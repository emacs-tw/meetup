;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name clojure.browser.repl, :imports nil, :requires {goog.dom goog.dom, goog.userAgent.product goog.userAgent.product, garray goog.array, gobj goog.object, goog.object goog.object, gdom goog.dom, net clojure.browser.net, clojure.browser.net clojure.browser.net, product goog.userAgent.product, event clojure.browser.event, cljs.repl cljs.repl, goog.array goog.array, clojure.browser.event clojure.browser.event}, :uses nil, :defs {send-result {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 71, :column 7, :end-line 71, :end-column 18, :arglists (quote ([connection url data]))}, :name clojure.browser.repl/send-result, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 18, :method-params ([connection url data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists (quote ([connection url data]))}, xpc-connection {:name clojure.browser.repl/xpc-connection, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 30, :column 1, :end-line 30, :end-column 20, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 30, :column 6, :end-line 30, :end-column 20}}, print-queue {:name clojure.browser.repl/print-queue, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 31, :column 1, :end-line 31, :end-column 17, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 31, :column 6, :end-line 31, :end-column 17}}, get-ua-product {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 47, :column 7, :end-line 47, :end-column 21, :arglists (quote ([]))}, :name clojure.browser.repl/get-ua-product, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bootstrap {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 125, :column 7, :end-line 125, :end-column 16, :arglists (quote ([])), :doc "Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load."}, :name clojure.browser.repl/bootstrap, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load."}, connect {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 184, :column 7, :end-line 184, :end-column 14, :arglists (quote ([repl-server-url])), :doc "Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function."}, :name clojure.browser.repl/connect, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 14, :method-params ([repl-server-url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([repl-server-url])), :doc "Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function."}, repl-print {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([data]))}, :name clojure.browser.repl/repl-print, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, evaluate-javascript {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 54, :column 7, :end-line 54, :end-column 26, :arglists (quote ([conn block])), :doc "Process a single block of JavaScript received from the server"}, :name clojure.browser.repl/evaluate-javascript, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 26, :method-params ([conn block]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn block])), :doc "Process a single block of JavaScript received from the server"}, flush-print-queue! {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([conn]))}, :name clojure.browser.repl/flush-print-queue!, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 25, :method-params ([conn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([conn]))}, wrap-message {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 90, :column 7, :end-line 90, :end-column 19, :arglists (quote ([t data]))}, :name clojure.browser.repl/wrap-message, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 19, :method-params ([t data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t data]))}, start-evaluator {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 93, :column 7, :end-line 93, :end-column 22, :arglists (quote ([url])), :doc "Start the REPL server connection."}, :name clojure.browser.repl/start-evaluator, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 22, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Start the REPL server connection."}, load-queue {:name clojure.browser.repl/load-queue, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 123, :column 1, :end-line 123, :end-column 16, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 123, :column 6, :end-line 123, :end-column 16}}, send-print {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 74, :column 7, :end-line 74, :end-column 17, :arglists (quote ([url data] [url data n])), :doc "Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([url data] [url data n]), :arglists ([url data] [url data n]), :arglists-meta (nil nil)}}, :name clojure.browser.repl/send-print, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([url data] [url data n]), :arglists ([url data] [url data n]), :arglists-meta (nil nil)}, :method-params ([url data] [url data n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists ([url data] [url data n]), :doc "Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times."}, order {:name clojure.browser.repl/order, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 88, :column 1, :end-line 88, :end-column 11, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/clojure/browser/repl.cljs", :line 88, :column 6, :end-line 88, :end-column 11}}}, :require-macros {cljs.repl cljs.repl}, :cljs.analyzer/constants {:seen #{:ready :ua-product :safari :content :value :type :evaluate-javascript :peer_uri :print :firefox :success :chrome :status :result :ie :stacktrace :order :error :exception :send-result}, :order [:print :safari :chrome :firefox :ie :status :ua-product :value :stacktrace :exception :success :error :type :content :order :evaluate-javascript :send-result :result :ready :peer_uri]}, :doc "Receive - Eval - Print - Loop\n\n  Receive a block of JS (presumably generated by a ClojureScript compiler)\n  Evaluate it naively\n  Print the result of evaluation to a string\n  Send the resulting string back to the server Loop!"}