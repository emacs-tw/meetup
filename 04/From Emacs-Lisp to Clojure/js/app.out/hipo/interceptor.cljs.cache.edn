;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name hipo.interceptor, :imports nil, :requires nil, :uses nil, :defs {StaticReconciliationInterceptor {:num-fields 0, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/StaticReconciliationInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 41, :type true, :column 10, :line 56, :record false, :end-line 56, :skip-protocol-flag nil}, ProfileInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/ProfileInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 28, :type true, :column 10, :line 30, :record false, :end-line 30, :skip-protocol-flag nil}, Interceptor {:meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 4, :column 14, :end-line 4, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-intercept [[this t m f]]}}}, :protocol-symbol true, :name hipo.interceptor/Interceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 25, :column 1, :line 4, :protocol-info {:methods {-intercept [[this t m f]]}}, :info nil, :end-line 4, :impls #{hipo.interceptor/StateInterceptor hipo.interceptor/PerformanceInterceptor hipo.interceptor/TimeInterceptor hipo.interceptor/LogInterceptor hipo.interceptor/IdentityReconciliationInterceptor hipo.interceptor/ProfileInterceptor hipo.interceptor/StaticReconciliationInterceptor}, :doc nil, :jsdoc ("@interface")}, StateInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/StateInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 26, :type true, :column 10, :line 50, :record false, :end-line 50, :skip-protocol-flag nil}, ->PerformanceInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 39, :column 10, :end-line 39, :end-column 32, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([label]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->PerformanceInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 32, :method-params ([label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([label])), :skip-protocol-flag nil}, ->IdentityReconciliationInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 64, :column 10, :end-line 64, :end-column 43, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->IdentityReconciliationInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 43, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, PerformanceInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/PerformanceInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 32, :type true, :column 10, :line 39, :record false, :end-line 39, :skip-protocol-flag nil}, ->ProfileInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 30, :column 10, :end-line 30, :end-column 28, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([label]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->ProfileInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 28, :method-params ([label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([label])), :skip-protocol-flag nil}, -intercept {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 5, :column 4, :end-line 5, :end-column 14, :protocol hipo.interceptor/Interceptor, :doc nil, :arglists (quote ([this t m f]))}, :protocol hipo.interceptor/Interceptor, :name hipo.interceptor/-intercept, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 14, :method-params ([this t m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 5, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this t m f])), :doc nil}, call {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([f v t m]))}, :name hipo.interceptor/call, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 11, :method-params ([f v t m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 4, :fn-var true, :arglists (quote ([f v t m]))}, ->StateInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 50, :column 10, :end-line 50, :end-column 26, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([a]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->StateInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 26, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :skip-protocol-flag nil}, TimeInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/TimeInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 25, :type true, :column 10, :line 22, :record false, :end-line 22, :skip-protocol-flag nil}, ->TimeInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 22, :column 10, :end-line 22, :end-column 25, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->TimeInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :skip-protocol-flag nil}, ->LogInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 15, :column 10, :end-line 15, :end-column 24, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([b]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->LogInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 24, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b])), :skip-protocol-flag nil}, IdentityReconciliationInterceptor {:num-fields 0, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/IdentityReconciliationInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 43, :type true, :column 10, :line 64, :record false, :end-line 64, :skip-protocol-flag nil}, ->StaticReconciliationInterceptor {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :line 56, :column 10, :end-line 56, :end-column 41, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->StaticReconciliationInterceptor, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 41, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, LogInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/LogInterceptor, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/hipo/interceptor.cljs", :end-column 24, :type true, :column 10, :line 15, :record false, :end-line 15, :skip-protocol-flag nil}}, :require-macros {hipo.interceptor hipo.interceptor}, :cljs.analyzer/constants {:seen #{:new-value a :value :hipo/static :old-value :type s label :reconciliate b}, :order [:reconciliate b s label :type :value a :new-value :hipo/static :old-value]}, :doc nil}