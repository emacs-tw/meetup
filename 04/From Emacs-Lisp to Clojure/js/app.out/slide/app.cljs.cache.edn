;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name slide.app, :imports nil, :requires {hipo hipo.core, hipo.core hipo.core}, :uses nil, :defs {add-element-to-id {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 4, :column 8, :end-line 4, :end-column 25, :private true, :arglists (quote ([id body])), :doc "Add hiccup element to id."}, :private true, :name slide.app/add-element-to-id, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 25, :method-params ([id body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id body])), :doc "Add hiccup element to id."}, add-image-with-link {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 12, :column 8, :end-line 12, :end-column 27, :private true, :arglists (quote ([type id child]))}, :private true, :name slide.app/add-image-with-link, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 27, :method-params ([type id child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type id child]))}, clojure-books-1 {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 28, :column 7, :end-line 28, :end-column 22, :arglists (quote ([]))}, :name slide.app/clojure-books-1, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clojure-books-2 {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 41, :column 7, :end-line 41, :end-column 22, :arglists (quote ([]))}, :name slide.app/clojure-books-2, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clojure-books-3 {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 52, :column 7, :end-line 52, :end-column 22, :arglists (quote ([]))}, :name slide.app/clojure-books-3, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, cljs-books-1 {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([]))}, :name slide.app/cljs-books-1, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, build-system {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 74, :column 7, :end-line 74, :end-column 19, :arglists (quote ([]))}, :name slide.app/build-system, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :line 89, :column 16, :end-line 89, :end-column 20, :export true, :arglists (quote ([]))}, :name slide.app/init, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/-p9hf6h/slide/app.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {hipo hipo.core, hipo.core hipo.core}, :cljs.analyzer/constants {:seen #{:img.img-responsive :div.col-xs-4 :src :div.row :url :image :target :div.col-xs-3 :clj :cljs :a.thumbnail :href}, :order [:image :url :div.col-xs-3 :a.thumbnail :href :target :img.img-responsive :src :div.row :clj :cljs :div.col-xs-4]}, :doc nil}