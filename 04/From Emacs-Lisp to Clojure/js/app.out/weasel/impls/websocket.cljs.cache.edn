;; Analyzed by ClojureScript 1.7.122
{:name weasel.impls.websocket, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {connect clojure.browser.net, event-types clojure.browser.event, IConnection clojure.browser.net, transmit clojure.browser.net}, :requires {net clojure.browser.net, clojure.browser.net clojure.browser.net, event clojure.browser.event, clojure.browser.event clojure.browser.event, gwebsocket goog.net.WebSocket, goog.net.WebSocket goog.net.WebSocket}, :imports nil, :defs {IWebSocket {:meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/weasel/impls/websocket.cljs", :line 14, :column 14, :end-line 14, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {open? [[this]]}}}, :protocol-symbol true, :name weasel.impls.websocket/IWebSocket, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/weasel/impls/websocket.cljs", :end-column 24, :column 1, :line 14, :protocol-info {:methods {open? [[this]]}}, :info nil, :end-line 14, :impls #{goog/net.WebSocket}, :doc nil, :jsdoc ("@interface")}, open? {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/weasel/impls/websocket.cljs", :line 15, :column 4, :end-line 15, :end-column 9, :protocol weasel.impls.websocket/IWebSocket, :doc nil, :arglists (quote ([this]))}, :protocol weasel.impls.websocket/IWebSocket, :name weasel.impls.websocket/open?, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/weasel/impls/websocket.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, websocket-connection {:protocol-inline nil, :meta {:file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/weasel/impls/websocket.cljs", :line 17, :column 7, :end-line 17, :end-column 27, :arglists (quote ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists-meta (nil nil nil)}}, :name weasel.impls.websocket/websocket-connection, :variadic false, :file "/Volumes/Data/Copy/dotfiles/.boot/cache/tmp/Users/coldnew/Workspace/from-elisp-to-clojure/slide/assets/slide/kry/ixzxya/js/app.out/weasel/impls/websocket.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists-meta (nil nil nil)}, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn])}}}